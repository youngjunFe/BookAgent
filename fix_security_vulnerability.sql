-- 🚨 긴급 보안 수정: 사용자 데이터 격리
-- 이 스크립트는 Supabase SQL Editor에서 실행하세요
-- 실행 전에 기존 데이터를 백업하는 것을 권장합니다

-- 1. reviews 테이블에 user_id 컬럼 추가
ALTER TABLE reviews 
ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;

-- 2. ebooks 테이블에 user_id 컬럼 추가  
ALTER TABLE ebooks 
ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;

-- 3. reading_goals 테이블 확인 (이미 user_id가 있을 수 있음)
-- ALTER TABLE reading_goals 
-- ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;

-- 4. 기존 RLS 정책들 제거 (보안상 위험한 정책들)
DROP POLICY IF EXISTS "Users can view all ebooks" ON ebooks;
DROP POLICY IF EXISTS "Users can insert ebooks" ON ebooks;
DROP POLICY IF EXISTS "Users can update ebooks" ON ebooks;
DROP POLICY IF EXISTS "Users can delete ebooks" ON ebooks;
DROP POLICY IF EXISTS "Users can view all achievements" ON achievements;
DROP POLICY IF EXISTS "Users can update achievements" ON achievements;
DROP POLICY IF EXISTS "Users can manage their goals" ON reading_goals;

-- 5. reviews 테이블에 대한 올바른 RLS 정책 생성
CREATE POLICY "Users can view own reviews" ON reviews 
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own reviews" ON reviews 
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own reviews" ON reviews 
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own reviews" ON reviews 
  FOR DELETE USING (auth.uid() = user_id);

-- 6. ebooks 테이블에 대한 올바른 RLS 정책 생성
CREATE POLICY "Users can view own ebooks" ON ebooks 
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own ebooks" ON ebooks 
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own ebooks" ON ebooks 
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own ebooks" ON ebooks 
  FOR DELETE USING (auth.uid() = user_id);

-- 7. reading_goals 테이블에 대한 올바른 RLS 정책 생성
CREATE POLICY "Users can view own reading goals" ON reading_goals 
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own reading goals" ON reading_goals 
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own reading goals" ON reading_goals 
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own reading goals" ON reading_goals 
  FOR DELETE USING (auth.uid() = user_id);

-- 8. achievements 테이블은 모든 사용자가 볼 수 있도록 유지 (업적은 공통 데이터)
CREATE POLICY "All users can view achievements" ON achievements 
  FOR SELECT USING (true);

-- 9. RLS 활성화 확인
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE ebooks ENABLE ROW LEVEL SECURITY;
ALTER TABLE reading_goals ENABLE ROW LEVEL SECURITY;
ALTER TABLE achievements ENABLE ROW LEVEL SECURITY;

-- 10. 인덱스 생성 (성능 향상)
CREATE INDEX IF NOT EXISTS idx_reviews_user_id ON reviews(user_id);
CREATE INDEX IF NOT EXISTS idx_ebooks_user_id ON ebooks(user_id);
CREATE INDEX IF NOT EXISTS idx_reading_goals_user_id ON reading_goals(user_id);

-- ⚠️  중요한 주의사항:
-- 1. 기존 데이터에 user_id가 NULL인 경우, 해당 데이터는 조회되지 않습니다
-- 2. 기존 데이터를 특정 사용자에게 할당하려면 다음과 같은 쿼리를 실행하세요:
-- 
-- UPDATE reviews SET user_id = '[사용자_UUID]' WHERE user_id IS NULL;
-- UPDATE ebooks SET user_id = '[사용자_UUID]' WHERE user_id IS NULL;
--
-- 3. 또는 기존 데이터를 모두 삭제하고 새로 시작할 수도 있습니다:
-- 
-- DELETE FROM reviews WHERE user_id IS NULL;
-- DELETE FROM ebooks WHERE user_id IS NULL;

COMMENT ON COLUMN reviews.user_id IS '리뷰 작성자 ID - 사용자별 데이터 격리를 위해 추가';
COMMENT ON COLUMN ebooks.user_id IS '전자책 소유자 ID - 사용자별 데이터 격리를 위해 추가';

-- 완료 메시지
DO $$
BEGIN
  RAISE NOTICE '🚨 보안 취약점 수정 완료!';
  RAISE NOTICE '✅ 이제 사용자별로 데이터가 격리되어 다른 사용자의 데이터를 볼 수 없습니다.';
  RAISE NOTICE '⚠️  기존 데이터에 user_id를 할당하거나 삭제해야 할 수 있습니다.';
END $$;
